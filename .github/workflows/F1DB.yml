name: F1 Sync DB

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *" # Ogni giorno a mezzanotte

jobs:
  update-database:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    env:
      BRANCH_NAME: chore/db-sync

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "23"

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql postgresql-contrib unzip curl jq
          yarn install

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Get latest F1DB release
        id: get_latest_release
        run: |
          LATEST_RELEASE_URL=$(curl -s https://api.github.com/repos/f1db/f1db/releases/latest | jq -r '.assets[] | select(.name == "f1db-sql-postgresql-single-inserts.zip") | .browser_download_url')
          LATEST_RELEASE_TAG=$(curl -s https://api.github.com/repos/f1db/f1db/releases/latest | jq -r '.tag_name')
          echo "download_url=$LATEST_RELEASE_URL" >> "$GITHUB_OUTPUT"
          echo "latest_tag=$LATEST_RELEASE_TAG" >> "$GITHUB_OUTPUT"

      - name: Check if release exists
        id: check_release
        run: |
          LATEST_TAG="${{ steps.get_latest_release.outputs.latest_tag }}"

          if [ ! -s "db/last-release.txt" ]; then
            echo "$LATEST_TAG" > db/last-release.txt
            echo "is_new_release=true" >> "$GITHUB_OUTPUT"
          else
            CURRENT_RELEASE=$(cat db/last-release.txt)
            if [ "$CURRENT_RELEASE" != "$LATEST_TAG" ]; then
              echo "is_new_release=true" >> "$GITHUB_OUTPUT"
            else
              echo "is_new_release=false" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Download and unzip F1DB release
        if: steps.check_release.outputs.is_new_release == 'true'
        run: |
          curl -L ${{ steps.get_latest_release.outputs.download_url }} -o f1db.zip
          unzip f1db.zip

      - name: Apply SQL to database
        if: steps.check_release.outputs.is_new_release == 'true'
        env:
          PGPASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: f1-graphql-db-f1-graphql.c.aivencloud.com
          DB_PORT: 23000
          DB_USER: avnadmin
          DB_NAME: defaultdb
        run: |
          SQL_FILE=$(find . -name "f1db-sql-postgresql-single-inserts.sql")
          PGPASSWORD=$PGPASSWORD psql \
            -h $DB_HOST \
            -p $DB_PORT \
            -U $DB_USER \
            -d $DB_NAME \
            -v sslmode=require \
            -f "$SQL_FILE"

      - name: Update files
        if: steps.check_release.outputs.is_new_release == 'true'
        run: |
          echo "${{ steps.get_latest_release.outputs.latest_tag }}" > db/last-release.txt
          yarn version --patch --no-git-tag-version
          echo "âœ… Files aggiornati"

      - name: Create new branch and push
        if: steps.check_release.outputs.is_new_release == 'true'
        run: |
          git checkout -b $BRANCH_NAME
          git add db/last-release.txt package.json
          git commit -m "chore: update DB to ${{ steps.get_latest_release.outputs.latest_tag }}"
          git push origin $BRANCH_NAME

      - name: Create Pull Request
        if: steps.check_release.outputs.is_new_release == 'true'
        id: create_pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.PAT_APPROVE_PR }}
          branch: ${{ env.BRANCH_NAME }}
          base: main
          title: "chore: DB sync with ${{ steps.get_latest_release.outputs.latest_tag }}"
          body: "Aggiornamento automatico del database alla versione ${{ steps.get_latest_release.outputs.latest_tag }}"
          draft: false

      - name: Approve Pull Request
        if: steps.check_release.outputs.is_new_release == 'true'
        run: |
          gh pr review ${{ steps.create_pr.outputs.pull-request-url }} --approve
        env:
          GH_TOKEN: ${{ secrets.PAT_APPROVE_PR }}

      - name: Enable auto-merge
        if: steps.check_release.outputs.is_new_release == 'true'
        run: |
          gh pr merge ${{ steps.create_pr.outputs.pull-request-url }} --merge --auto
        env:
          GH_TOKEN: ${{ secrets.PAT_APPROVE_PR }}
